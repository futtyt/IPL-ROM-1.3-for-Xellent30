--- base\IPLROM30Xel.DAT.s	2022-04-02 23:23:34.391616300 +0900
+++ current\IPLROM30Xel.DAT.s	2022-04-03 00:48:08.921562000 +0900
@@ -4147,10 +4147,12 @@
 	.dc.l	$00ff9340,$00000000
 	.dc.l	$00000000,$203c1392
 	.dc.l	$11274e75
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
 Lff0038:
 	move.w	#$2700,sr
-	lea.l	($2000),a7
-	reset
+; ソフトウェアリセットの判定をXellent30用起動処理の中で利用するため、先に実行しておく。
 	moveq.l	#$00,d5
 	cmp.l	(Lff1af6,pc),d0
 	bne	Lff0052
@@ -4158,6 +4160,12 @@
 	bne	Lff0052
 	moveq.l	#$ff,d5
 Lff0052:
+; Xellent30用起動処理へ
+	jmp	(LXellent30_Boot_Begin)
+; 終わったらここに戻る。
+LXellent30_Boot_End:
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+
 	move.l	($0030),d6
 	lsl.l	#8,d6
 	lsr.l	#8,d6
@@ -4191,7 +4199,7 @@
 	dbra	d0,Lff00a0
 	lea.l	(Lff07be,pc),a0
 	move.l	a0,($07fc)
-	lea.l	(Lff03f2,pc),a0
+	lea.l	(L_IOCS_IPLERR_fe,pc),a0
 	move.l	a0,($07f8)
 	lea.l	(Lff07cc,pc),a0
 	move.l	a0,($07f4)
@@ -4273,7 +4281,7 @@
 	move.w	#$2000,sr
 	bsr	Lff05be
 	move.b	($00ed0028),($00e8e001)
-	clr.b	($00e86001)
+	move.b	#$0,(-$3FFF,a0)				; MC68000でのバスエラーを回避する。
 	move.b	#$04,($00e8a01f)
 	tst.b	($00e9a001)
 	tst.b	($00e9a001)
@@ -4368,159 +4376,167 @@
 	bsr	Lff080a
 	jsr	(a0)
 	bra	Lff1a16
-Lff0300:
-	move.w	($00ed0092),d0
-	bne	Lff030c
-	move.w	#$0a04,d0
+Lff0300:	; XF1〜XF5キー押下による起動方法切替
+	move.w	($00ed0092),d0					; D0レジスタをSRAM 10/16MHz 相当のウェイト値にする。
+	bne	Lff030c						; SRAM 10MHz 相当のウェイト値が0であれば、
+	move.w	#$0a04,d0					; D0レジスタを$0a04($0a:10MHz相当、$04:16MHz相当)にする。
 Lff030c:
-	lea.l	($0800),a1
-	btst.b	#$01,($000b,a1)
-	bne	Lff033c
-	btst.b	#$00,($000b,a1)
-	bne	Lff0328
-	tst.b	($000a,a1)
-	bpl	Lff0360
-	lsr.w	#8,d0
-Lff0328:
-	cmpi.b	#$01,($0cbc)
-	bls	Lff033c
-	move.b	d0,($00e8e009)
-	moveq.l	#$00,d0
-	movec.l	d0,cacr
-Lff033c:
-	movea.l	(Lff000c,pc),a0
-	move.l	($0002,a0),d0
-	add.l	($0006,a0),d0
-	lea.l	($001c,a0),a0
-	lea.l	($6800),a1
+	lea.l	($0800),a1					; A1レジスタをIOCSワーク キーの押し下げ状態にする。
+	btst.b	#$01,($000b,a1)					; XF5キーが、
+	bne	Lff033c						; 押されていればLff033cへジャンプする。
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/  電源オン、またはリセットボタン押下と同時にXF4キーを押下していた場合の処理
+	jsr	LCheckXF4Key
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;	btst.b	#$00,($000b,a1)					; XF4キーが、
+	bne	Lff0328						; 押されていればLff0328へジャンプする。
+	tst.b	($000a,a1)					; XF3キーが、
+	bpl	Lff0360						; 押されていなければLff0360へジャンプする。
+	lsr.w	#8,d0						; XF3キー押下によりメモリウェイトを10MHz相当(X68030のみ有効)、キャッシュオフにしてHuman68k v2.15(ROM)で起動する。
+Lff0328:	; XF4キー押下によりメモリウェイトを16MHz相当(X68030のみ有効)、キャッシュオフにしてHuman68k v2.15(ROM)で起動する。
+	cmpi.b	#$01,($0cbc)					; MPUがMC68010
+	bls	Lff033c						; 以下であればLff033cへジャンプする。
+	move.b	d0,($00e8e009)					; System Port #5のROM Waitを0、DRAM Waitを$a:10MHz相当か、$0:16MHz相当にする。
+	moveq.l	#$00,d0						; D0レジスタを0クリアする。
+	movec.l	d0,cacr						; キャッシュをすべてオフにする。
+Lff033c:	; XF5キー押下によりメモリウェイト、キャッシュの設定を変更せずにHuman68k v2.15(ROM)で起動する。
+	movea.l	(Lff000c,pc),a0					; A0レジスタをHuman68k v2.15(ROM)のサイズ格納先($fc0200)にする。
+	move.l	($0002,a0),d0					; D0レジスタをROMサイズ($DC0C=$A822+$33EA)にする。
+	add.l	($0006,a0),d0					;
+	lea.l	($001c,a0),a0					; A0レジスタをHuman68k v2.15(ROM)の先頭アドレス($fc021c)にする。
+	lea.l	($6800),a1					; A1レジスタをブート領域の先頭アドレス($6800)にする。
 Lff0350:
-	move.b	(a0)+,(a1)+
-	subq.l	#1,d0
-	bne	Lff0350
-	move.b	#$90,($09e0)
-	jmp	($6800)
-
-Lff0360:
-	cmpi.b	#$01,($0cbc)
-	bls	Lff0386
-	btst.b	#$06,($000a,a1)
-	bne	Lff037a
-	btst.b	#$05,($000a,a1)
-	beq	Lff0386
-	lsr.w	#8,d0
-Lff037a:
-	move.b	d0,($00e8e009)
-	moveq.l	#$00,d0
-	movec.l	d0,cacr
-Lff0386:
-	move.w	($00ed0018),d1
-	beq	Lff03ac
-	btst.b	#$02,($000e,a1)
-	bne	Lff03ac
-	move.w	d1,d0
-	and.w	#$f000,d0
-	rol.w	#4,d0
-	subq.w	#8,d0
-	beq	Lff03d8
-	subq.w	#2,d0
-	bcs	Lff03ce
-	beq	Lff03de
-	subq.w	#1,d0
-	beq	Lff03e2
-Lff03ac:
-	bsr	Lff0524
-	bsr	Lff04a8
-	bsr	Lff045e
-	bsr	Lff048e
-	bra	Lff03f2
-Lff03be:
-	move.w	d1,-(a7)
-	moveq.l	#$05,d2
-	bsr	Lff03e8
-	move.w	(a7)+,d1
-	lea.l	(Lff0b88,pc),a1
-	bsr	Lff0728
-Lff03ce:
-	bsr	Lff04fa
-	bsr	Lff0544
-	bra	Lff03ac
-Lff03d8:
+	move.b	(a0)+,(a1)+					; Human68k v2.15(ROM)をブート領域にコピーする。
+	subq.l	#1,d0						;
+	bne	Lff0350						;
+	move.b	#$90,($09e0)					; 起動ユニット番号(PDA)を2HD 0($90)にする。
+	jmp	($6800)						; ブート開始
+
+Lff0360:	; XF3、XF4、XF5いずれのキーも押されていない場合
+	cmpi.b	#$01,($0cbc)					; MPUがMC68010
+	bls	Lff0386						; 以下であればLff0386へジャンプする。
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/  電源オン、またはリセットボタン押下と同時にXF2キーを押下していた場合の処理
+	jsr	LCheckXF2Key
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;	btst.b	#$06,($000a,a1)					; XF2キー
+	bne	Lff037a						; 押されていればLff037aへジャンプする。
+	btst.b	#$05,($000a,a1)					; XF1キー
+	beq	Lff0386						; 押されていなければLff0386へジャンプする。
+	lsr.w	#8,d0						; XF1キー押下によりメモリウェイトを10MHz相当(X68030のみ有効)、キャッシュオフにして起動処理を続行する。
+Lff037a:	; XF2キー押下によりメモリウェイトを16MHz相当(X68030のみ有効)、キャッシュオフにして起動処理を続行する。
+	move.b	d0,($00e8e009)					; IOMAP ROM/DRAM ウェイト数制御をD0レジスタ値にする。
+	moveq.l	#$00,d0						; D0レジスタを0クリアする。
+	movec.l	d0,cacr						; キャッシュをすべてオフにする。
+Lff0386:	; SRAM 最優先ブートデバイス順に起動
+	move.w	($00ed0018),d1					; SRAM 最優先ブートデバイス
+	beq	Lff03ac						; STDであればLff03acへジャンプする。
+	btst.b	#$02,($000e,a1)					; OPT.1キー
+	bne	Lff03ac						; 押下していればLff03acへジャンプする。
+	move.w	d1,d0						; D0レジスタをSRAM 最優先ブートデバイスにする。
+	and.w	#$f000,d0					; D0レジスタをブートデバイス種別にする。
+	rol.w	#4,d0						; $8:HD、$9:2HD、$a:ROM、$b:RAM
+	subq.w	#8,d0						; ブートデバイス種別が
+	beq	Lff03d8						; $8:HDであればLff03d8へジャンプする。
+	subq.w	#2,d0						; ブートデバイス種別が
+	bcs	Lff03ce						; $9:2HDであればLff03ceへジャンプする。
+	beq	Lff03de						; $a:ROMであればLff03deへジャンプする。
+	subq.w	#1,d0						; ブートデバイス種別が
+	beq	Lff03e2						; $b:RAMであればLff03e2へジャンプする。
+Lff03ac:	; 起動処理 STD
+	bsr	Lff0524						; 起動処理 2HD 0〜3
+	bsr	Lff04a8						; 起動処理 HD 0〜15
+	bsr	Lff045e						; 起動処理 ROM
+	bsr	Lff048e						; 起動処理 RAM
+	bra	L_IOCS_IPLERR_fe				; 2HD 起動ディスク挿入待ちメッセージを表示する。
+Lff03be:	; 2HD 起動ディスク挿入待ちメッセージからの起動
+	move.w	d1,-(a7)					; D1レジスタをスタックに積む。
+	moveq.l	#$05,d2						; D2レジスタをディスクがセットされていない時 LED 消灯にする。
+	bsr	Lff03e8						; 2HD 0〜3 ドライブの状態設定をディスクがセットされていない時 LED 消灯にする。
+	move.w	(a7)+,d1					; スタックからD1レジスタに戻す。
+	lea.l	(Lff0b88,pc),a1					; $1a,$00
+	bsr	Lff0728						; 文字列表示(IN A1:文字列のアドレス OUT D0:表示後のカーソル位置(桁、行)、A1:文字列終端NULLのアドレス)
+Lff03ce:	; 起動処理 2HD
+	bsr	Lff04fa						; 起動対象の2HDに対してドライブの状態検査(350回試行)を行う。
+	bsr	Lff0544						; 起動処理 2HD 0〜3
+	bra	Lff03ac						; 起動処理 STDからやり直す。(起動可能なドライブが見つからなかった場合のみ、ここに戻ってくる。)
+Lff03d8:	; 起動処理 HD
 	bsr	Lff04be
-	bra	Lff03ac
-Lff03de:
+	bra	Lff03ac						; 起動処理 STDからやり直す。(起動可能なドライブが見つからなかった場合のみ、ここに戻ってくる。)
+Lff03de:	; 起動処理 ROM
 	bsr	Lff045e
-	bra	Lff03ac
-Lff03e2:
+	bra	Lff03ac						; 起動処理 STDからやり直す。(起動可能なドライブが見つからなかった場合のみ、ここに戻ってくる。)
+Lff03e2:	; 起動処理 RAM
 	bsr	Lff048e
-	bra	Lff03ac
+	bra	Lff03ac						; 起動処理 STDからやり直す。(起動可能なドライブが見つからなかった場合のみ、ここに戻ってくる。)
 Lff03e8:
-	move.w	#$9070,d1
-	IOCS	_B_DRVCHK
-	rts
-
-Lff03f2:
-	bsr	Lff07e8
-	lea.l	($2000),a7
-	tst.b	($09de)
-	bne	Lff0446
-	lea.l	(Lff0a90,pc),a1
-	bsr	Lff0728
-	bset.b	#$00,($00e8002a)
-	lea.l	(Lff0820,pc),a1
-	move.w	(Lff09e4,pc),d1
-	move.w	(Lff09e6,pc),d2
-	IOCS	_TEXTPUT
-	bclr.b	#$00,($00e8002a)
-	moveq.l	#$04,d2
-	bsr	Lff03e8
+	move.w	#$9070,d1					; 2HD 0 ドライブの
+	IOCS	_B_DRVCHK					; 2HD ドライブの状態設定をして
+	rts							; 呼び出し元に戻る。
+
+L_IOCS_IPLERR_fe:	; 再起動する
+	bsr	Lff07e8						; CRTモードが19であればテキスト画面を(64, 16)へスクロールする。
+	lea.l	($2000),a7					; スタックポインタを$2000にする。
+	tst.b	($09de)						; IOCSワーク ROM デバッガ起動スイッチ(0:off !0:on)が
+	bne	Lff0446						; OFFであれば、
+	lea.l	(Lff0a90,pc),a1					; A1レジスタを$00ff0a90にして、 '   ',$1b,'[16;26H      ディスクから起動できません。    ',$1b,'[17;26H 正しいディスクをセットしてください。 ',$1b,'[18;26H'
+	bsr	Lff0728						; 文字列表示(IN A1:文字列のアドレス OUT D0:表示後のカーソル位置(桁、行)、A1:文字列終端NULLのアドレス)
+	bset.b	#$00,($00e8002a)				; CRTコントローラ 同時アクセス/ラスタコピー/高速クリアプレーン撰択のCP0を1にする。
+	lea.l	(Lff0820,pc),a1					; データバッファのアドレスを$00ff0820に、
+	move.w	(Lff09e4,pc),d1					; X 座標を504に、
+	move.w	(Lff09e6,pc),d2					; Y 座標を224にして
+	IOCS	_TEXTPUT					; テキスト VRAM のドット単位書き込みを実行する。
+	bclr.b	#$00,($00e8002a)				; CRTコントローラ 同時アクセス/ラスタコピー/高速クリアプレーン撰択のCP0を0に戻す。
+	moveq.l	#$04,d2						; ディスクがセットされていない時 LED 点滅で
+	bsr	Lff03e8						; 2HD 0 ドライブの状態設定を設定する。
 Lff042c:
-	move.w	#$9070,d1
+	move.w	#$9070,d1					; 2HD 0 ドライブの
 Lff0430:
-	IOCS	_B_DRVSNS
-	btst.l	#$1d,d0
-	bne	Lff03be
-	add.w	#$0100,d1
-	cmp.w	#$9470,d1
-	bne	Lff0430
-	bra	Lff042c
-Lff0446:
-	lea.l	(Lff0a43,pc),a1
-	bsr	Lff0728
-	move.w	#$007c,-(a7)
-	pea.l	(Lff0038,pc)
-	move.w	sr,-(a7)
-	move.l	($007c),-(a7)
-	rts
-
-Lff045e:
-	movea.l	($00ed000c),a0
-	movea.l	a7,a6
-	lea.l	(Lff0486,pc),a1
-	movea.l	($0008),a2
-	move.l	a1,($0008)
-	movea.l	(a0),a3
-	move.l	a2,($0008)
-	move.b	#$01,($09e0)
-	bsr	Lff080a
-	jsr	(a3)
-	rts
+	IOCS	_B_DRVSNS					; ドライブの状態検査をして
+	btst.l	#$1d,d0						; FDC ステータス ドライブのReady信号の状態が
+	bne	Lff03be                                         ; 有効であればLff03beへジャンプする。無効であれば
+	add.w	#$0100,d1					; 次のドライブを
+	cmp.w	#$9470,d1					; 2HD 3 ドライブまで
+	bne	Lff0430						; ドライブの状態検査をする。
+	bra	Lff042c						; 2HD 0 ドライブからやり直す。
+Lff0446:							; IOCSワーク ROM デバッガ起動スイッチ(0:off !0:on)がONであれば、
+	lea.l	(Lff0a43,pc),a1					; A1レジスタを$00ff0a43にして、 $1b,'[16;30Hディスクから起動できません。  ',$1b,'[17;30Hター','ミナルモニタを起動します。',$00
+	bsr	Lff0728						; 文字列表示(IN A1:文字列のアドレス OUT D0:表示後のカーソル位置(桁、行)、A1:文字列終端NULLのアドレス)
+	move.w	#$007c,-(a7)					; $007cをスタックに積む。
+	pea.l	(Lff0038,pc)					; $00ff0038をスタックに積む。
+	move.w	sr,-(a7)					; ステータスレジスタをスタックに積む。
+	move.l	($007c),-(a7)					; レベル  7 割り込み(NMI)の例外ベクタをスタックに積む。
+	rts							; ROMデバッガを起動する。(NMI割込みによるROMデバッガ起動処理と同じシーケンス)
+
+Lff045e:	; 起動処理 ROM($fc???? の場合 ID=????/4 の SCSI から起動)
+	movea.l	($00ed000c),a0					; A0レジスタをSRAM ROM 起動アドレス(1.l)へのポインタにする。
+	movea.l	a7,a6						; A6レジスタをスタックポインタにする。
+	lea.l	(Lff0486,pc),a1					;
+	movea.l	($0008),a2					; A2レジスタを例外ベクタ アドレスエラーにする。
+	move.l	a1,($0008)					; 例外ベクタ アドレスエラーを$00ff0486にする。
+	movea.l	(a0),a3						; A3レジスタをSRAM ROM 起動アドレスにする。
+	move.l	a2,($0008)					; 例外ベクタ アドレスエラーを元に戻す。
+	move.b	#$01,($09e0)					; IOCSワーク 起動ユニット番号(PDA)をROMにする。
+	bsr	Lff080a						; テキスト画面を(0, 0)へスクロールする。
+	jsr	(a3)						; SRAM ROM 起動アドレスから起動する。
+	rts							; 呼び出し元に戻る。
+
+Lff0486:	; アドレスエラー発生時の処理
+	movea.l	a6,a7						; スタックポインタを元に戻す。
+	move.l	a2,($0008)					; 例外ベクタ アドレスエラーを元に戻す。
+	rts							; 呼び出し元に戻る。
 
-Lff0486:
-	movea.l	a6,a7
-	move.l	a2,($0008)
-	rts
-
-Lff048e:
+Lff048e:	; 起動処理 RAM
 	movea.l	($00ed0010),a0
 	cmpi.b	#$60,(a0)
 	bne	Lff04a6
-	move.b	#$02,($09e0)
+	move.b	#$02,($09e0)					; IOCSワーク 起動ユニット番号(PDA)をRAMにする。
 	bsr	Lff080a
 	jsr	(a0)
 Lff04a6:
 	rts
 
-Lff04a8:
+Lff04a8:	; 起動処理 HD 0〜15(SCSIバス上のSASIディスク)
 	move.w	#$8000,d1
 Lff04ac:
 	bsr	Lff04be
@@ -4532,7 +4548,7 @@
 Lff04bc:
 	rts
 
-Lff04be:
+Lff04be:	; 起動処理 HD(D1レジスタ $8000〜$8f00)
 	moveq.l	#$00,d2
 	move.l	#$00000400,d3
 	lea.l	($2000),a1
@@ -4547,90 +4563,90 @@
 	bne	Lff04f0
 	cmpi.b	#$60,(a1)
 	bne	Lff04f0
-	lsr.w	#8,d1
-	move.b	d1,($09e0)
+	lsr.w	#8,d1						; D1レジスタを$80〜$8fにする。
+	move.b	d1,($09e0)					; IOCSワーク 起動ユニット番号(PDA)をSASI-HD 0〜15($80〜$8f)にする。
 	bsr	Lff080a
 	jmp	(a1)
 
 Lff04f0:
 	move.l	d0,-(a7)
-	IOCS	_B_EJECT
+	IOCS	_B_EJECT					; ディスクのシッピング
 	move.l	(a7)+,d0
 	rts
 
-Lff04fa:
-	movem.l	d0-d2,-(a7)
-	move.w	#$015d,d2
+Lff04fa:	; ドライブの状態検査(350回試行)
+	movem.l	d0-d2,-(a7)					; D0〜D2レジスタをスタックに積む。
+	move.w	#$015d,d2					; ドライブの状態検査の試行回数を350回にする。
 Lff0502:
-	move.l	#$000000c8,d0
-	bsr	Lff0d12
-	IOCS	_B_DRVSNS
-	btst.l	#$1d,d0
-	dbne	d2,Lff0502
-	movem.l	(a7)+,d0-d2
-	rts
+	move.l	#$000000c8,d0					; 
+	bsr	Lff0d12						; タイマ C 割込みが200回発生するまで待つ。
+	IOCS	_B_DRVSNS					; IOCSコール ドライブの状態検査
+	btst.l	#$1d,d0						; FDC ステータス ドライブのReady信号の状態が
+	dbne	d2,Lff0502					; 有効になるか、350回試行しても無効のままであれば
+	movem.l	(a7)+,d0-d2					; D0〜D2レジスタをスタックから戻して
+	rts							; 呼出し元に戻る。
 
-Lff051e:
+Lff051e:	; 2HD イジェクト
 	IOCS	_B_EJECT
 	rts
 
-Lff0524:
-	move.w	#$9070,d1
+Lff0524:	; 起動処理 2HD 0〜3
+	move.w	#$9070,d1					; 2HD 0
 	bsr	Lff04fa
 	lea.l	(Lff0544,pc),a1
 	bsr	Lff0544
-	move.w	#$9170,d1
+	move.w	#$9170,d1					; 2HD 1
 	bsr	Lff0544
-	move.w	#$9270,d1
+	move.w	#$9270,d1					; 2HD 2
 	bsr	Lff0544
-	move.w	#$9370,d1
+	move.w	#$9370,d1					; 2HD 3
 	bsr	Lff0544
 	rts
 
-Lff0544:
-	moveq.l	#$01,d2
-	move.l	#$00000400,d3
-	lea.l	($2000),a1
-	movem.l	d1-d4/a1,-(a7)
-	move.w	#$013f,d4
+Lff0544:	; 起動処理 2HD
+	moveq.l	#$01,d2						; D2レジスタを$00000002にする。
+	move.l	#$00000400,d3					; ディスクからの読み込みバイト数を1,024バイトにする。
+	lea.l	($2000),a1					; ディスクからの読み込みバッファの先頭を$2000にする。
+	movem.l	d1-d4/a1,-(a7)					; D1〜D4、A1レジスタをスタックに積む。
+	move.w	#$013f,d4					; ドライブの状態検査の試行回数を320回にする。
 Lff0558:
-	IOCS	_B_DRVSNS
-	btst.l	#$1d,d0
-	dbne	d4,Lff0558
-	beq	Lff05b4
-	IOCS	_B_RECALI
-	btst.l	#$1e,d0
-	bne	Lff05b4
-	IOCS	_B_READID
-	btst.l	#$1e,d0
-	bne	Lff05b4
-	move.w	d1,d0
-	lsr.w	#8,d0
-	and.w	#$0003,d0
-	lsl.w	#3,d0
-	lea.l	($0c90),a0
-	adda.w	d0,a0
-	moveq.l	#$00,d0
-	move.b	($0006,a0),d0
-	ror.l	#8,d0
-	or.l	d0,d2
-	moveq.l	#$46,d0
-	move.l	a1,-(a7)
-	trap	#15
-	movea.l	(a7)+,a1
-	btst.l	#$1e,d0
-	bne	Lff05b4
-	cmpi.b	#$60,(a1)
-	bne	Lff05b4
-	lsr.w	#8,d1
-	move.b	d1,($09e0)
-	bsr	Lff080a
-	jmp	(a1)
-
-Lff05b4:
-	IOCS	_B_EJECT
-	movem.l	(a7)+,d1-d4/a1
-	rts
+	IOCS	_B_DRVSNS					; IOCSコール ドライブの状態検査
+	btst.l	#$1d,d0						; FDC ステータス ドライブのReady信号の状態が
+	dbne	d4,Lff0558					; 有効になるか、320回試行しても無効のままであれば
+	beq	Lff05b4						; 無効のままであれば異常終了する。
+	IOCS	_B_RECALI					; IOCSコール ディスクのリキャリブレイト
+	btst.l	#$1e,d0						; リザルトステータス 0のInterrupt Codeが
+	bne	Lff05b4						; 正常終了となっていなければ異常終了する。
+	IOCS	_B_READID					; IOCSコール 2HD の ID 情報の読み出し
+	btst.l	#$1e,d0						; リザルトステータス 0のInterrupt Codeが
+	bne	Lff05b4						; 正常終了となっていなければ異常終了する。
+	move.w	d1,d0						; PDAから
+	lsr.w	#8,d0						; 処理中のドライブ番号を
+	and.w	#$0003,d0					; 抽出して
+	lsl.w	#3,d0						; FDn リザルトステータス受信バッファのオフセット値を計算する。(0、8、16、32)
+	lea.l	($0c90),a0					; A0レジスタを
+	adda.w	d0,a0						; FDn リザルトステータス受信バッファにする。(n:処理中のドライブ番号0〜4)
+	moveq.l	#$00,d0						; D0レジスタを0クリアする。
+	move.b	($0006,a0),d0					; D0レジスタのバイト範囲をリザルトステータスの1セクタあたりのリードサイズにする。
+	ror.l	#8,d0						; D0レジスタを8ビット右ローテートする。
+	or.l	d0,d2						; D2レジスタに結合する。
+	moveq.l	#$46,d0						; IOCSコール _B_READ ディスクからの読み込み
+	move.l	a1,-(a7)					; 
+	trap	#15						; 
+	movea.l	(a7)+,a1					; 
+	btst.l	#$1e,d0						; リザルトステータス 0のInterrupt Codeが
+	bne	Lff05b4						; 正常終了となっていなければ異常終了する。
+	cmpi.b	#$60,(a1)					; 2HD IPLの先頭が$60
+	bne	Lff05b4						; でなければ異常終了する。
+	lsr.w	#8,d1						; PDAを8ビット右へシフトして
+	move.b	d1,($09e0)					; IOCSワーク 起動ユニット番号(PDA)を2HD	0〜 3($90〜$93)にする。
+	bsr	Lff080a						; テキスト画面の(0, 0)に移動する。
+	jmp	(a1)						; ディスクから読み込んだIPLで起動する。
+
+Lff05b4:	; 異常終了
+	IOCS	_B_EJECT					; ディスクをイジェクトして
+	movem.l	(a7)+,d1-d4/a1					; D1〜D4、A1レジスタをスタックから戻して
+	rts							; 呼び出し元に戻る。
 
 Lff05be:
 	move.l	#$ffffffff,($09d2)
@@ -5158,7 +5174,7 @@
 	suba.l	d0,a0
 	cmpa.w	#$0006,a0
 	beq	Lff0e00
-	moveq.l	#$10,d1
+	moveq.l	#$1,d1					; たぶんMC68010の判定間違い
 	bra	Lff0e00
 Lff0e30:
 	nop
@@ -13093,21 +13109,21 @@
 	move.l	d0,($0944)
 	rts
 
-Lff7234:
-	cmp.b	#$08,d2
-	bne	Lff723c
-	moveq.l	#$00,d2
+L_IOCS_FNTADR_16:	; フォントアドレスの収得(d1.w 漢字コード(Shift-JIS/JIS)、d2.b パターンの大きさ)
+	cmp.b	#$08,d2						; パターンの大きさが8 8x16,16x16ドット
+	bne	Lff723c						; でなければLff723cへジャンプする。
+	moveq.l	#$00,d2						; パターンの大きさを0クリアする。
 Lff723c:
-	cmp.w	#$2121,d1
-	bcs	Lff73bc
-	cmpi.w	#$f000,d1
-	bcc	Lff7424
-	cmpi.w	#$8140,d1
-	bcc	Lff7276
-	cmp.w	#$7e7f,d1
-	bcc	Lff73ac
-	moveq.l	#$00,d0
-	move.b	d1,d0
+	cmp.w	#$2121,d1					; 漢字コードが$2121
+	bcs	Lff73bc						; より小さければLff73bcへジャンプする。
+	cmpi.w	#$f000,d1					; 漢字コードが$f000〜$ffff
+	bcc	Lff7424						; であればLff7424へジャンプする。
+	cmpi.w	#$8140,d1					; 漢字コードが$8140〜$efff
+	bcc	Lff7276						; であればLff7276へジャンプする。
+	cmp.w	#$7e7f,d1					; 漢字コードが$7e7f〜$813f
+	bcc	Lff73ac						; であればLff73acへジャンプする。
+	moveq.l	#$00,d0						; 漢字コードが$2121〜$7e7eであればD0レジスタを0クリアする。
+	move.b	d1,d0						; D0レジスタを漢字コードの下位バイトにする。
 	lsr.w	#8,d1
 	sub.w	#$0021,d1
 	cmp.w	#$007f,d0
@@ -13118,7 +13134,7 @@
 	moveq.l	#$07,d0
 	moveq.l	#$01,d1
 	bra	Lff72b4
-Lff7276:
+Lff7276:	; 漢字コードが$8140〜$efffの場合
 	moveq.l	#$00,d0
 	move.b	d1,d0
 	lsr.w	#8,d1
@@ -13213,79 +13229,79 @@
 	.dc.b	$00,$00,$00,$00,$00,$00,$00,$00
 	.dc.b	$ff,$ff,$ff,$01,$01,$ff,$ff,$00
 Lff7366:
-	and.l	#$000000ff,d1
-	cmp.w	#$005c,d1
-	bcc	Lff7374
+	and.l	#$000000ff,d1					; 漢字コードの下位バイトを抽出する。
+	cmp.w	#$005c,d1					; 漢字コードの下位バイトが'\'
+	bcc	Lff7374						; 以上であればLff7374へジャンプする。
 Lff7372:
-	rts
+	rts							; Lff73bcへ戻る。
 
-Lff7374:
-	lea.l	($00ed0059),a0
-	beq	Lff7394
-	cmp.w	#$007e,d1
-	beq	Lff73a0
-	cmp.w	#$007c,d1
-	bne	Lff7372
-	btst.b	#$02,(a0)
-	beq	Lff7372
-	move.w	#$0082,d1
-	bra	Lff7372
-Lff7394:
-	btst.b	#$00,(a0)
-	beq	Lff7372
-	move.w	#$0080,d1
-	bra	Lff7372
-Lff73a0:
-	btst.b	#$01,(a0)
-	beq	Lff7372
-	move.w	#$0081,d1
-	bra	Lff7372
-Lff73ac:
-	cmp.w	#$80a6,d1
-	bcs	Lff73bc
-	cmp.w	#$80de,d1
-	bcc	Lff73bc
-	eori.b	#$20,d1
-Lff73bc:
-	bsr	Lff7366
-	cmp.b	#$06,d2
-	bcs	Lff73e4
-	beq	Lff73f6
-	move.l	#$00f3d000,d0
+Lff7374:							; 漢字コードの下位バイトが'\'以上の場合
+	lea.l	($00ed0059),a0					; A0レジスタをSRAM $7c,$7e,$5c(\~|) の文字変換フラグのアドレスにする。
+	beq	Lff7394						; 漢字コードの下位バイトが'\'であればLff7394へジャンプする。
+	cmp.w	#$007e,d1					; 漢字コードの下位バイトが'~'
+	beq	Lff73a0						; であればLff73a0へジャンプする。
+	cmp.w	#$007c,d1					; 漢字コードの下位バイトが'|'
+	bne	Lff7372						; でなければLff7372へジャンプする。
+	btst.b	#$02,(a0)					; SRAM $7c,$7e,$5c(\~|) の文字変換フラグのbit 2が
+	beq	Lff7372						; 0:｜ であればLff7372へジャンプする。
+	move.w	#$0082,d1					; 1:｜(破線)あれば漢字コードの下位バイトを$0082にして
+	bra	Lff7372						; Lff7372へジャンプする。
+Lff7394:							; 漢字コードの下位バイトが'\'の場合
+	btst.b	#$00,(a0)					; SRAM $7c,$7e,$5c(\~|) の文字変換フラグのbit 0が
+	beq	Lff7372						; 0:￥であればLff7372へジャンプする。
+	move.w	#$0080,d1					; 1:＼であれば漢字コードの下位バイトを$0080にして
+	bra	Lff7372						; Lff7372へジャンプする。
+Lff73a0:							; 漢字コードの下位バイトが'~'の場合
+	btst.b	#$01,(a0)					; SRAM $7c,$7e,$5c(\~|) の文字変換フラグのbit 1が
+	beq	Lff7372						; 0:￣であればLff7372へジャンプする。
+	move.w	#$0081,d1					; 1:〜であれば漢字コードの下位バイトを$0081にして
+	bra	Lff7372						; Lff7372へジャンプする。
+Lff73ac:							; 漢字コードが$7e7f〜$813fの場合
+	cmp.w	#$80a6,d1					; 漢字コードが$7e7f〜$80a5の場合
+	bcs	Lff73bc						; Lff73bcへジャンプする。
+	cmp.w	#$80de,d1					; 漢字コードが$80de〜$813fの場合
+	bcc	Lff73bc						; Lff73bcへジャンプする。
+	eori.b	#$20,d1						; 漢字コードが$80a6〜$813eであれば漢字コードの下位バイトを$20で排他的論理和する。
+Lff73bc:							; 漢字コードが$2121より小さい場合
+	bsr	Lff7366						; Lff7366を呼出す。
+	cmp.b	#$06,d2						; パターンの大きさが
+	bcs	Lff73e4						; 12であればLff73e4へジャンプする。
+	beq	Lff73f6						; 6であればLff73f6へジャンプする。
+	move.l	#$00f3d000,d0					; 8であれば返値(パターンアドレス)を$00f3d000にする。
 Lff73cc:
-	lsl.l	#4,d1
-	add.l	d1,d0
-	add.l	d1,d0
-	add.l	d1,d0
+	lsl.l	#4,d1						; [12x24]漢字コードを16倍にする。
+	add.l	d1,d0						; [12x24]返値(パターンアドレス)を6x12ドットフォントの先頭から
+	add.l	d1,d0						; [12x24]漢字コード * 32ワード
+	add.l	d1,d0						; [12x24]の位置にする。
 Lff73d4:
-	cmp.b	#$06,d2
-	beq	Lff740c
-	move.l	#$000c0001,d1
-	moveq.l	#$17,d2
-	rts
+	cmp.b	#$06,d2						; パターンの大きさが
+	beq	Lff740c						; 6であればLff740cへジャンプする。
+	move.l	#$000c0001,d1					; [12x24]パターンの X 方向のドット数を12にして、パターンの X 方向のバイト数-1を1にする。
+	moveq.l	#$17,d2						; [12x24]パターンの Y 方向のドット数-1を23にする。
+	rts							; [12x24]呼出し元に戻る。
 
 Lff73e4:
-	move.l	#$00f3a800,d0
+	move.l	#$00f3a800,d0					; [ 8x16]返値(パターンアドレス)を8x16ドットフォントの先頭にする。
 Lff73ea:
-	lsl.l	#4,d1
-	add.l	d1,d0
+	lsl.l	#4,d1						; [ 8x16]返値(パターンアドレス)を8x16ドットフォントの先頭から
+	add.l	d1,d0						; [ 8x16]漢字コード * 16バイトの位置にする。
 Lff73ee:
-	moveq.l	#$08,d1
-	swap.w	d1
-	moveq.l	#$0f,d2
-	rts
-
-Lff73f6:
-	move.l	#$00fbf400,d0
-	lsl.l	#2,d1
-	add.l	d1,d0
-	add.l	d1,d0
-	add.l	d1,d0
+	moveq.l	#$08,d1						; [ 8x16]パターンの X 方向のドット数を8
+	swap.w	d1						; [ 8x16]にして、パターンの X 方向のバイト数-1を0にする。
+	moveq.l	#$0f,d2						; [ 8x16]パターンの Y 方向のドット数-1を15にする。
+	rts							; [ 8x16]呼出し元に戻る。
+
+Lff73f6:							; [ 6x12]パターンの大きさが6の場合
+	move.l	#$00fef400,d0					; [ 6x12]返値(パターンアドレス)を6x12ドットフォントの先頭にする。★000機でも6x12ドットフォントを使えるようにする。 $00fbf400→$00fef400
+	lsl.l	#2,d1						; [ 6x12]漢字コードを4倍にする。
+	add.l	d1,d0						; [ 6x12]返値(パターンアドレス)を6x12ドットフォントの先頭から
+	add.l	d1,d0						; [ 6x12]漢字コード * 12バイト
+	add.l	d1,d0						; [ 6x12]の位置にする。
 Lff7404:
-	moveq.l	#$06,d1
-	swap.w	d1
-	moveq.l	#$0b,d2
-	rts
+	moveq.l	#$06,d1						; [ 6x12]パターンの X 方向のドット数を6
+	swap.w	d1						; [ 6x12]にして、パターンの X 方向のバイト数-1を0にする。
+	moveq.l	#$0b,d2						; [ 6x12]パターンの Y 方向のドット数-1を11にする。
+	rts							; [ 6x12]呼出し元に戻る。
 
 Lff740c:
 	bsr	Lff74fe
@@ -13297,7 +13313,7 @@
 	beq	Lff73ea
 	move.l	($09ae),d0
 	bra	Lff73cc
-Lff7424:
+Lff7424:	; 漢字コードが$f000〜$ffffの場合
 	and.l	#$0000ffff,d1
 	cmp.w	#$f400,d1
 	bcc	Lff7412
@@ -22521,58 +22537,52 @@
 
 Lffd260:
 	movem.l	d1-d3/a1-a4,-(a7)
-	lea.l	($0009,a6),a2
-	lea.l	($000d,a6),a3
-	lea.l	($0015,a6),a4
-	tst.l	d3
-	bne	Lffd278
-	move.w	#$0100,d3
+	lea.l	($0009,a6),a2					; A2レジスタをSPC INTSにする。
+	lea.l	($000d,a6),a3					; A3レジスタをSPC SSTSにする。
+	lea.l	($0015,a6),a4					; A4レジスタをSPC DREG(データ入出力を行うレジスタ. 8 バイトの FIFO バッファとなっている.)にする。
+	tst.l	d3						; 読込むバイト数が
+	bne	Lffd278						; 0でなければLffd278へジャンプする。
+	move.w	#$0100,d3					; 0であれば読込むバイト数を256バイトにする。
 Lffd278:
-	move.b	($000b,a6),d0
-	andi.b	#$07,d0
-	move.b	d0,($0011,a6)
-	move.l	#Lffffff,d0
-	and.l	d3,d0
-	movep.l	d0,($0017,a6)
-	move.b	(a2),(a2)
-	move.b	#$80,($0005,a6)
+	move.b	($000b,a6),d0					; D4レジスタをSPC SDGCの値にする。
+	andi.b	#$07,d0						; SPC SDGCのDiag MSG、Diag C/D、Diag I/Oを抽出する。
+	move.b	d0,($0011,a6)					; SPC PCTLのBusfree INT Enableを0に、Transfer Phase MSG、Transfer Phase C/D、Transfer Phase I/OをSDGCのDiag MSG、Diag C/D、Diag I/Oにする。
+	move.l	#Lffffff,d0					; D0レジスタを$ffffffにする。
+	and.l	d3,d0						; 読込むバイト数を$1〜$ffffffに制限する。
+	movep.l	d0,($0017,a6)					; SPC TEMPを読込むバイト数にする。
+	move.b	(a2),(a2)					; SPC INTSを同じ値で上書きする。
+	move.b	#$80,($0005,a6)					; SPC SMDのCommand CodeをTransfer(%100)にする。
 Lffd298:
-	move.b	(a3),d0
-	andi.b	#$f0,d0
-	cmp.b	#$70,d0
-	beq	Lffd2ba
-	cmp.b	#$b0,d0
-	bne	Lffd298
-	tst.b	($00ed0070)
-	bmi	Lffd314
+	move.b	(a3),d0						; D0レジスタをSPC SSTSの値にする。
+	andi.b	#$f0,d0						; SSTSのConnected、SPC Busy、Transfer in progressを抽出する。
+	cmp.b	#$70,d0						; SSTSのConnectedが「ターゲットとして結合中」、SPC Busyが「コマンド実行中/実行待ち状態である」、Transfer in progressが「ハード転送実行中/SCSI で転送フェーズが要求されている」
+	beq	Lffd2ba						; であればLffd2baへジャンプする。
+	cmp.b	#$b0,d0						; SSTSのConnectedが「イニシエータとして結合中」、SPC Busyが「コマンド実行中/実行待ち状態である」、Transfer in progressが「ハード転送実行中/SCSI で転送フェーズが要求されている」
+	bne	Lffd298						; でなければLffd298へ戻る。
+	tst.b	($00ed0070)					; SRAM SCSI 関係(bit 7〜4 は X68030 以降で有効) bit 7	 転送ブロックサイズ(0:256 1:512;$cc0で可変)が
+	bmi	Lffd314						; 1であればLffd314へジャンプする。
 Lffd2b2:
-	move.l	d3,d0
-	lsr.l	#3,d0
-	beq	Lffd2e8
-	move.l	d0,d2
-Lffd2ba:
-	tst.b	(a2)
-	bne	Lffd300
-	btst.b	#$01,(a3)
-	beq	Lffd2ba
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	move.l	d0,(a1)+
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	move.l	d0,(a1)+
-	subq.l	#1,d2
-	bne	Lffd2ba
+	move.l	d3,d0						; D0レジスタを読込むバイト数にする。
+	lsr.l	#3,d0						; 読込むバイト数が
+	beq	Lffd2e8						; 8バイト未満であればLffd2e8へジャンプする。
+	move.l	d0,d2						; D2レジスタを読込む回数(読込むバイト数を8で割った値)にする。
+Lffd2ba: 	; 8バイト単位の読込み処理
+	tst.b	(a2)						; SPC INTSのすべての状態が
+	bne	Lffd300						; 通常動作でなければLffd300へジャンプする。
+	btst.b	#$01,(a3)					; SPC SSTSのDREG statusが
+	beq	Lffd2ba						; 「8 バイトのデータがある」でなければLffd2baへ戻る。
+	move.b	(a4),(a1)+					; ★MC68000でRASDRV上のLHAファイルを開くとエラーが発生する箇所。
+	move.b	(a4),(a1)+					; a1が奇数アドレスの場合にエラーとなるmove.l d0,(a1)+をmove.b (a4),(a1)+に置換えた。
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	subq.l	#1,d2						; 読込み回数に達するまで
+	bne	Lffd2ba						; Lffd2baへ戻る。
+	bra	Lffd2e8						; move.b (a4),(a1)+への置換えによるサイズ調整のためのジャンプを追加した。
+	.dcb.b	14,$ff						; 14バイトの空き
 Lffd2e8:
 	and.w	#$0007,d3
 	beq	Lffd300
@@ -22610,43 +22620,28 @@
 	beq	Lffd324
 	move.w	d2,d1
 Lffd330:
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	move.l	d0,(a1)+
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	move.l	d0,(a1)+
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	move.l	d0,(a1)+
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	lsl.l	#8,d0
-	move.b	(a4),d0
-	move.l	d0,(a1)+
+	move.b	(a4),(a1)+					; ★MC68000でRASDRV上のLHAファイルを開くとエラーが発生する箇所。
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
+	move.b	(a4),(a1)+
 	dbra	d1,Lffd330
 	subq.w	#1,d3
 	bne	Lffd324
 	swap.w	d3
 	bra	Lffd2b2
+	.dcb.b	32,$ff						; 14バイトの空き
 Lffd37e:
 	movem.l	d1-d3/a1-a3,-(a7)
 	lea.l	($000b,a6),a2
@@ -25284,8 +25279,229 @@
 	nop
 	jmp	(a0)
 
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+	.DCB.B	946*2,$FF				;030SYSpatch用の予約領域
+
+LXellent30_Boot_Begin:
+	tst.b	d5
+	bne	LXellent30_Change_MPU_Entry		; ソフトウェアリセットの場合はCPUを切替えない。
+	move.b	#3,($cbc)				; MC68030をデフォルトにする。
+
+LXellent30_Change_MPU_Entry:
+	lea.l	($2000),sp
+
+	bsr	LGetXellent30_IO
+	cmpa.l	#0,a0
+	bne	LXellent30_Boot				;Xellent30のI/Oアドレスが見つかった場合は専用Boot処理へ。
+
+	RESET
+	bra	LXellent30_Boot_Exit
+
+LXellent30_Boot:
+	bsr	LCheckMpu
+	tst.b	d0
+	beq	LReset_Entry				;d0(0:MC68000、1:MC68030)動作中のMPUがMC68000であれば、ここでは切替え不要。
+
+	moveq.l	#$0,d1					;ソフトウェアリセットの場合はMC68030のままここに来る。
+	bsr	LChange_MPU				;RESET時の動作MPUはMC68000である必要があるため、ここでMPUをMC68000に切替える。
+
+LReset_Entry:
+	RESET
+
+	cmpi.b	#1,($cbc)
+	bls	LBoot000
+
+LBoot030:
+	moveq.l	#$4,d1
+	bsr	LChange_MPU				;MPUをMC68030に切替える。
+	bra	LInitializeSRAM_Entry
+
+LBoot000:
+	moveq.l	#$0,d1
+
+LInitializeSRAM_Entry:
+	bsr	LInitializeSRAM				;Xellent30のSRAMを初期化する。
+
+LXellent30_Boot_Exit:
+	jmp	LXellent30_Boot_End
+
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+
+;*****************************************************************************
+;******* MPU判定
+;******* IN  なし
+;******* OUT d0 判定結果(0:MC68000、1:MC68030)
+;******* USE なし
+LCheckMpu:
+	moveq.l #1,d0
+	.CPU 68020
+	and.b	((*)-3,pc,d0.w*2),d0
+	.CPU 68000
+	rts
+;*****************************************************************************
+
+;*****************************************************************************
+;******* MPU切替え
+;******* IN  a0 Xellent30のI/Oアドレス、d1 切替え先のMPU種別($0000:MC68000、$0004:MC68030)
+;******* OUT なし
+;******* USE すべてのレジスタを元に戻す
+LChange_MPU:
+	move.w	sr,-(sp)
+	movem.l	d0-d7/a0-a6,-(sp)
+	lea.l	(LChange_MPU_ReEntry,pc),a1
+	move.l	a1,($00000004)
+	move.l	sp,($00000000)
+	move.w	d1,(a0)
+	nop
+	nop
+	nop
+	nop						; MC68000へ戻す時はこの辺りから再開する。
+	nop
+	nop
+	nop
+
+LChange_MPU_ReEntry:
+	move.w	#$2700,sr
+	move.l	$0,sp
+	move.l	($ff0004),($4)
+	move.l	($ff0000),($0)
+	movem.l	(sp)+,d0-d7/a0-a6
+
+LChange_MPU_Exit:
+	move.w	(sp)+,sr
+	rts
+;*****************************************************************************
+
+;*****************************************************************************
+;******* Xellent30のI/Oアドレスを取得する。
+;******* IN なし
+;******* OUT a0 Xellent30のI/Oアドレス(失敗の場合は$00000000)
+LGetXellent30_IO:
+	movem.l	d0-d7/a1-a6,-(sp)
+	lea.l	$ec0000,a0
+	moveq.l	#3,d3
+@@:							;A0レジスタ:Xellent30 I/Oアドレス
+	bsr	LCheckIO
+	tst.b	d2
+	beq	@f
+	adda.w	#$4000,a0
+	dbra	d3,@b
+	suba.l	a0,a0					;失敗
+@@:
+	movem.l	(sp)+,d0-d7/a1-a6
+	rts
+;*****************************************************************************
+
+;*****************************************************************************
+;******* 指定されたI/Oアドレスが読込み可能かチェックする。
+;******* IN  a0 チェック対象のI/Oアドレス
+;******* OUT d2 チェック結果($00000000:読込み可、$ffffffff:不可)
+;******* USE a1,a2,a6 破壊
+LCheckIO:
+	movea.l	sp,a6
+	movea.l	$0008,a2				;バスエラーの例外ハンドラを退避しておく。
+	lea.l	LCheckIO_BusError(pc),a1		;バスエラーをフックする。
+	move.l	a1,$0008
+	tst.w	(a0)					;読込み不可なら、ここでバスエラー
+	move.l	a2,$0008				;バスエラーの例外ハンドラを元に戻す。
+	moveq.l	#0,d2
+	rts
+
+LCheckIO_BusError:
+	movea.l	a6,sp
+	move.l	a2,$0008
+	moveq.l	#$ff,d2
+	rts
+;*****************************************************************************
+
+;*****************************************************************************
+;******* 拡張SRAM($00ffc0000)初期化、IPL-ROMコピー
+;******* IN  a0 Xellent30のI/Oアドレス、d1 切替え先のMPU種別($0000:MC68000、$0004:MC68030)
+;******* OUT なし
+LInitializeSRAM:
+	movem.l	d0-d7/a0-a6,-(a7)
+	or.b	#$2,d1
+	move.w	d1,(a0)
+	lea.l	$bc0000,a1
+	lea.l	$fc0000,a2
+	moveq.l	#$ff,d2
+@@:
+	move.l	(a2)+,(a1)+
+	dbra	d2,@b
+	or.b	#$1,d1
+	move.w	d1,(a0)
+	movem.l	(a7)+,d0-d7/a0-a6
+	rts
+;*****************************************************************************
+
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/  X68000で電源オン、またはリセットボタン押下と同時にXF2キーを押下していた場合は
+;/_/_/  MPUをMC68000へ切替える。
+;/_/_/  IN  なし
+;/_/_/  OUT なし
+LCheckXF2Key:
+	movem.l	d1/a1,-(sp)
+	move.b	($00e8e00b),d1
+	cmp.b	#$dc,d1						; X68030の場合は
+	beq	LCheckXF2Key_NormalExit				; XF2キー押下の通常動作に戻る。LCheckXF2Key_NormalExitへジャンプする。
+
+	lea.l	($0800),a1					; A1レジスタをIOCSワーク キーの押し下げ状態にする。
+	btst.b	#$06,($000a,a1)					; XF2キー
+	beq	@f						; 押下されていなければ切替えない。@fへジャンプする。
+	cmpi.b	#$01,($0cbc)					; 稼働中のMPUが
+	bls	@f						; MC68010以下であれば切替えない。@fへジャンプする。
+	move.b	#0,($cbc)					; IOCSワークのMPU 種別を 0(68000)にする。
+	move.w	#$2700,sr
+	bra	LXellent30_Change_MPU_Entry			; MPU変更へ
+
+@@:
+	cmp.b	d1,d1						; Zフラグを落とす。※呼出し元のキー押下チェックをスルーするため。
+	bra	LCheckXF2Key_Exit
+
+LCheckXF2Key_NormalExit;
+	btst.b	#$05,($000a,a1)					; XF2キーのチェックをする。
+
+LCheckXF2Key_Exit;
+	movem.l	(sp)+,d1/a1
+	rts							; 呼出し元に戻る。
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+;/_/_/  X68000で電源オン、またはリセットボタン押下と同時にXF4キーを押下していた場合は
+;/_/_/  MPUをMC68030へ切替える。
+;/_/_/  IN  なし
+;/_/_/  OUT なし
+LCheckXF4Key:
+	movem.l	d1/a1,-(sp)
+	move.b	($00e8e00b),d1
+	cmp.b	#$dc,d1						; X68030の場合は
+	beq	LCheckXF4Key_NormalExit				; XF4キー押下の通常動作に戻る。LCheckXF2Key_NormalExitへジャンプする。
+
+	lea.l	($0800),a1					; A1レジスタをIOCSワーク キーの押し下げ状態にする。
+	btst.b	#$00,($000b,a1)					; XF4キー
+	beq	@f						; 押下されていなければ切替えない。@fへジャンプする。
+	cmpi.b	#$01,($0cbc)					; 稼働中のMPUが
+	bhi	@f						; MC68010より上位版であれば切替えない。@fへジャンプする。
+	move.b	#3,($cbc)					; IOCSワークのMPU 種別を 3(68030)にする。
+	move.w	#$2700,sr
+	bra	LXellent30_Change_MPU_Entry			; MPU変更へ
+
+@@:
+	cmp.b	d1,d1						; Zフラグを落とす。※呼出し元のキー押下チェックをスルーするため。
+	bra	LCheckXF4Key_Exit
+
+LCheckXF4Key_NormalExit;
+	btst.b	#$00,($000b,a1)					; XF4キーのチェックをする。
+
+LCheckXF4Key_Exit;
+	movem.l	(sp)+,d1/a1
+	rts							; 呼出し元に戻る。
+;/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
+
 Lffed6e:
-	.dcb.b	4753,$ff
+	.dcb.b	4753-1892-191*2,$ff
 Lffffff:
 	.dc.b	$ff
 L000000:
